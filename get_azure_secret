
function _usage() {
cat <<HELP
    Usage: get_azure_secret [OPTIONS]

    Get a secret from an Azure key value

    Options:
    -h/--help          Prints help and exits
    -s/--subscription  Azure subscription ID
    -v/--vault-name    Key vault name
    -n/--name          Secret name

HELP
}

PARAMS=""
while (( "$#" )); do
case "$1" in
    -h|--help)
        usage
        return 0
        ;;
    -s|--subscription)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            subscription=$2
            shift 2
        else
            echo "Error: Argument for $1 is missing" >&2
            usage
            return 1
        fi
        ;;
    -v|--vault-name)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            vault=$2
            shift 2
        else
            echo "Error: Argument for $1 is missing" >&2
            usage
            return 1
        fi
        ;;
    -n|--name)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            secret_name=$2
            shift 2
        else
            echo "Error: Argument for $1 is missing" >&2
            usage
            return 1
        fi
        ;;
    -*|--*=) # unsupported flags
        echo "Error: Unsupported flag $1" >&2
        usage
        return 1
        ;;
    *) # preserve positional arguments
    PARAMS="$PARAMS $1"
    shift
    ;;
esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

[[ -z ${subscription} ]] && {
    echo "Missing required parameter --subscription"
    usage
    return 1
}

[[ -z ${vault} ]] && {
    echo "Missing required parameter --vault-name"
    usage
    return 1
}

[[ -z ${secret_name} ]] && {
    echo "Missing required parameter --name"
    usage
    return 1
}

echo "$(az keyvault secret show --subscription ${subscription} --vault-name ${vault} --name ${secret_name} --query "value" --output tsv)"
